/*
 * credofasterpartnerapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package events_pkg


import(
	"encoding/json"
	"github.com/apimatic/unirest-go"
	"credofasterpartnerapi_lib/apihelper_pkg"
	"credofasterpartnerapi_lib/configuration_pkg"
	"credofasterpartnerapi_lib/models_pkg"
)
/*
 * Client structure as interface implementation
 */
type EVENTS_IMPL struct {
     config configuration_pkg.CONFIGURATION
}

/**
 * A callback to receive the below Callbacks
 * @param    *models_pkg.RegisterCallbackRequest        request     parameter: Required
 * @return	Returns the *models_pkg.RegisterCallbackResponse response from the API call
 */
func (me *EVENTS_IMPL) RegisterCallback (
            request *models_pkg.RegisterCallbackRequest) (*models_pkg.RegisterCallbackResponse, error) {
    //the endpoint path uri
    _pathUrl := "/RegisterCallback"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.ENUM_DEFAULT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "ApiKey" : credofasterpartnerapi_lib.config.ApiKey,
        "ClientId" : credofasterpartnerapi_lib.config.ClientId,
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, request)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.RegisterCallbackResponse = &models_pkg.RegisterCallbackResponse{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

/**
 * You are required to provide a HTTP/HTTPS endpoint, to which we will publish various events. 
 * This Endpoint will be hosted on the CLIENT's Environment. If no endpoint is provided, we are not liable to any missing events. 
 * NOTE: A DETAILED PDF of all Events is shared on request. It contains application events, System Health Events and Alerts on the same.
 * @param    *models_pkg.EventCallbackPayload        payloadToReceive       parameter: Required
 * @return	Returns the *models_pkg.EventCallbackFeedback response from the API call
 */
func (me *EVENTS_IMPL) ClientEventFeedback (
            payloadToReceive *models_pkg.EventCallbackPayload) (*models_pkg.EventCallbackFeedback, error) {
    //the endpoint path uri
    _pathUrl := "/my_endpoint_here"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.MY_CALLBACK_ENDPOINT,me.config);

    //prepare query string for API call
   _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, payloadToReceive)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal *models_pkg.EventCallbackFeedback = &models_pkg.EventCallbackFeedback{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil

}

